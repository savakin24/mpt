#!/usr/bin/env python3

# Deploy the smart contract.

from config import *


def deploy_contract():
    # Deploy contract.
    print(f"Deploying contract...")

    account = eth_account.Account.from_key(PKEY)
    addr_mine = account.address
    print(f"My address is: {addr_mine}")

    # Connect to blockchain RPC.
    w3 = Web3(Web3.HTTPProvider(WEB3_PROVIDER))

    if not w3.is_connected():
        print("Unable to connect to blockchain RPC.")
        return

    print("Connected to Web3 RPC.")

    # Load the compiled contract binary and ABI.
    contract_bin = open(CONTRACT_BIN, 'r').read()
    contract_abi = open(CONTRACT_ABI, 'r').read()
    contract = w3.eth.contract(abi=contract_abi, bytecode=contract_bin)

    # Get the current nonce for the account.
    nonce = w3.eth.get_transaction_count(account.address)

    # Build the transaction for deploying the contract.
    transaction = contract.constructor().build_transaction({
        'nonce': nonce,
        'gasPrice': w3.eth.gas_price,
        'from': addr_mine
    })

    # Sign the transaction with the private key.
    signed_txn = w3.eth.account.sign_transaction(transaction, private_key=PKEY)

    # Send the signed transaction.
    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)

    # Wait for the transaction receipt.
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

    print(f"Contract deployed at address: {tx_receipt.contractAddress}")
    return tx_receipt.contractAddress


if __name__ == "__main__":
    deploy_contract()
