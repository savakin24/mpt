#!/usr/bin/env python3


from config import *


def _exec_transaction(transaction):
    # Helper function to execute the transaction.
    try:
        # Sign the transaction with your private key
        signed_transaction = w3.eth.account.sign_transaction(transaction, PKEY)

        # Send the signed transaction
        tx_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)

        # Wait for the transaction to be mined
        receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
        print(f"receipt: {receipt}")
        print(f"Transaction successful with hash: {tx_hash.hex()}")

    except Exception as e:
        print(f"Error with transaction: {e}")


def get_weights():
    try:
        # Call the 'weights' to get weights.
        weights_0 = contract.functions.weights(0).call()
        weights_1 = contract.functions.weights(1).call()
        print(f"Weights are {weights_0} | {weights_1}")
        return [weights_0, weights_1]
    except Exception as e:
        print(f"Error reading mpt: {e}")


def get_value(addr=user_address):
    try:
        # Call the getValue on user address.
        value = contract.functions.getValue(addr).call()
        print(f"Value is {value}")
        return value
    except Exception as e:
        print(f"Error reading mpt value: {e}")


def get_assets(addr=user_address):
    try:
        # Get user assets.
        assets_0 = contract.functions.userAssets(addr, 0).call()
        assets_1 = contract.functions.userAssets(addr, 1).call()
        print(f"Assets are: {assets_0} / {assets_1}")
        return [assets_0, assets_1]
    except Exception as e:
        print(f"Error reading assets: {e}")


def set_weights(w1, w2):
    args = [w1, w2]
    transaction = contract.functions.setWeights(args).build_transaction({
        'gas': 2200000,  # Gas limit.
        'nonce': w3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)


def mpt_deposit(amount=2):
    # Need to approve this contract to use that amount .

    # RLUSD Contract's address:
    transaction = rlusd_contract.functions.approve(CONTRACT_ADDR, amount).build_transaction({
        'gas': 2200000,  # Gas limit.
        'nonce': w3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)

    transaction = contract.functions.deposit(amount).build_transaction({
        'gas': 2200000,  # Gas limit.
        'nonce': w3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)


def mpt_withdraw(amount=2):
    transaction = contract.functions.withdraw(amount).build_transaction({
        'gas': 2200000,  # Gas limit.
        'nonce': w3.eth.get_transaction_count(user_address),
        'from': user_address,
    })
    _exec_transaction(transaction)


def validate():
    pass
    # get_weights()
    # set_weights(30, 70)
    # get_weights()
    # mpt_deposit()
    # mpt_withdraw()
    # get_assets()
    # get_value()


if __name__ == "__main__":
    pass
    validate()
